/**
 *
 * ############################################################################
 * 
 *                          版权声明（中文版）
 *
 * ############################################################################
 * 
 * 版权所有 2015-2017 Reion Chan
 * 
 * 本程序遵照GPLv3，在你以任何方式使用本程序时，请务必署名此程序作者（Reion Chan）。
 * 本程序为自由软件：你可以在遵照GNU GPLv3（及后续版本）条款的前提下，转发、修改本程序。
 * 尝试在你的计算机要素的课程中盗用本程序的源代码将被诅咒会一生只写漏洞百出的程序。
 * 本程序旨在学习、交流，对本程序不承担任何担保责任，详细参见GPLv3许可。
 * 本程序包含一个GUN 通用公共授权。如果没有，请访问<http://www.gnu.org/licenses/>
 *
 *
 *
 * ############################################################################
 * 
 *                          Copyright （English Edition）
 *
 * ############################################################################
 *
 * Copyright 2015-2017 Reion Chan.
 *
 * You are required to give attribution to the author (Reion Chan) for any
 * use of this program (GPLv3 Section 7b).
 * 
 * Trying to pass off my code as your own in your Elements of Computing classes
 * will result in a cursed life of forever buggy software.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package org.reion;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

/**
 * 将VM命令翻译成Hack汇编代码
 * 
 * @author Reion Chan
 */
public class CodeWriter {

	// 翻译后汇编文件后缀名
	public static final String DEST_FIX = ".asm";
	// VM虚拟机语言源文件后缀名
	public static final String SOURCE_FIX = ".vm";
	// Stack pointer
	public static final String SP = "SP";
	// Local segment pointer
	public static final String SEGMENT_LCL = "LCL";
	// Argument segment pointer
	public static final String SEGMENT_ARG = "ARG";
	// This segment pointer
	public static final String SEGMENT_THIS = "THIS";
	// That segment pointer
	public static final String SEGMENT_THAT = "THAT";
	// 换行符
	public static final String LINE_SEPARATOR = System
			.getProperty("line.separator");
	// 标签格式模板1
	public static final String LABEL_PATTEN1 = "{0}${1}";
	// 标签格式模板2
	public static final String LABEL_PATTEN2 = "{0}.{1}";
	// 标签格式模板3
	public static final String LABEL_PATTEN3 = "{0}.{1}.{2}";
	// L指令开始标签
	public static final String L_BEGIN_TAG = "(";
	// L指令结束标签
	public static final String L_END_TAG = ")";
	// A指令标签
	public static final String A_TAG = "@";
	// 注释标签
	public static final String COMMENT_TAG = "//";

	// 文件路径
	private String filePath;
	// 输出的ASM文件名
	private String asmName;
	// 文件写入器
	private FileWriter fWriter;
	// 标签区别序列
	private static int seq = -1;
	// 当前正在翻译的VM文件名
	private String curVMFileName;

	/**
	 * 设置汇编文件的名称
	 * 
	 * @param asmStr
	 *            汇编文件名
	 */
	public void setAsmName(final String asmStr) {
		this.asmName = asmStr;
	}

	/**
	 * 设置汇编文件路径
	 * 
	 * @param filePath
	 *            汇编文件路径
	 */
	public void setFilePath(final String filePath) {
		this.filePath = filePath.endsWith(File.separator) ? filePath : filePath
				+ File.separator;

	}

	/**
	 * 通知代码写入程序，新的VM文件翻译过程已经开始
	 * 
	 * @param filename
	 *            VM文件名
	 */
	public void setFileName(final String filename) {
		String asmFileStr = (asmName == null) ? filename : asmName;
		if (fWriter == null) {
			try {
				File f = new File(filePath + asmFileStr + DEST_FIX);
				if (f.exists()) {
					f.delete();
				}
				fWriter = new FileWriter(f);
				writeComment("	******* HACK ASM FILE GENERATED BY VM COMPILER *******");
				writeComment("	VM  FILE: " + asmFileStr + SOURCE_FIX);
				writeComment("	COMPILER: JAVA_HACK_VM_COMPILER");
				writeComment("	GEN TIME: "
						+ SimpleDateFormat.getInstance().format(new Date())
						+ LINE_SEPARATOR + LINE_SEPARATOR);
				writeInit();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		curVMFileName = filename;
	}

	/**
	 * 向汇编代码写入注释.
	 * 
	 * @param contant
	 *            注释内容
	 */
	public void writeComment(final String contant) {
		try {
			fWriter.write(COMMENT_TAG + " " + contant + LINE_SEPARATOR);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 将给定的算术操作所对应的汇编代码写至输出
	 * 
	 * @param command
	 *            VM命令字符串
	 */
	public void writeArithmetic(final String command) {

		StringBuffer strB = new StringBuffer();
		String lab1, lab2, lab3, result;

		if ("add".equalsIgnoreCase(command) || "sub".equalsIgnoreCase(command)
				|| "and".equalsIgnoreCase(command)
				|| "or".equalsIgnoreCase(command)) {
			strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
					.append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("AM=M-1")
					.append(LINE_SEPARATOR).append("[wildcard]")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("M=M+1")
					.append(LINE_SEPARATOR);
			result = strB.toString();
		} else if ("eq".equalsIgnoreCase(command)
				|| "gt".equalsIgnoreCase(command)
				|| "lt".equalsIgnoreCase(command)) {

			++seq;
			lab1 = MessageFormat.format(LABEL_PATTEN3, new Object[] { "COMP",
					seq, "TRUE" });
			lab2 = MessageFormat.format(LABEL_PATTEN3, new Object[] { "COMP",
					seq, "FALSE" });
			lab3 = MessageFormat.format(LABEL_PATTEN3, new Object[] { "COMP",
					seq, "END" });

			strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
					.append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("AM=M-1")
					.append(LINE_SEPARATOR).append("D=M-D")
					.append(LINE_SEPARATOR).append(A_TAG).append(lab1)
					.append(LINE_SEPARATOR).append("[wildcard]")
					.append(LINE_SEPARATOR).append(A_TAG).append(lab2)
					.append(LINE_SEPARATOR).append("0;JMP")
					.append(LINE_SEPARATOR).append(L_BEGIN_TAG).append(lab1)
					.append(L_END_TAG).append(LINE_SEPARATOR).append(A_TAG)
					.append(SP).append(LINE_SEPARATOR).append("A=M")
					.append(LINE_SEPARATOR).append("M=-1")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("M=M+1")
					.append(LINE_SEPARATOR).append(A_TAG).append(lab3)
					.append(LINE_SEPARATOR).append("0;JMP")
					.append(LINE_SEPARATOR).append(L_BEGIN_TAG).append(lab2)
					.append(L_END_TAG).append(LINE_SEPARATOR).append(A_TAG)
					.append(SP).append(LINE_SEPARATOR).append("A=M")
					.append(LINE_SEPARATOR).append("M=0")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("M=M+1")
					.append(LINE_SEPARATOR).append(L_BEGIN_TAG).append(lab3)
					.append(L_END_TAG).append(LINE_SEPARATOR);
		} else if ("neg".equalsIgnoreCase(command)
				|| "not".equalsIgnoreCase(command)) {
			strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
					.append("AM=M-1").append(LINE_SEPARATOR)
					.append("[wildcard]").append(LINE_SEPARATOR).append(A_TAG)
					.append(SP).append(LINE_SEPARATOR).append("M=M+1")
					.append(LINE_SEPARATOR);

		}
		result = strB.toString();

		// { "add", "sub", "neg", "eq", "gt", "lt", "and", "or", "not" }
		switch (Arrays.asList(Parser.TYPE_ARI_LOG).indexOf(command)) {
		case 0:
			result = result.replace("[wildcard]", "M=D+M");
			break;
		case 1:
			result = result.replace("[wildcard]", "M=M-D");
			break;
		case 2:
			result = result.replace("[wildcard]", "M=-M");
			break;
		case 3:
			result = result.replace("[wildcard]", "D;JEQ");
			break;
		case 4:
			result = result.replace("[wildcard]", "D;JGT");
			break;
		case 5:
			result = result.replace("[wildcard]", "D;JLT");
			break;
		case 6:
			result = result.replace("[wildcard]", "M=D&M");
			break;
		case 7:
			result = result.replace("[wildcard]", "M=D|M");
			break;
		default:
			result = result.replace("[wildcard]", "M=!M");
			break;
		}

		try {
			fWriter.write(result);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 将给定的栈操作对应的汇编代码写至输出
	 * 
	 * @param command
	 * @param segment
	 * @param index
	 */
	public void writePushPop(final String command, final String segment,
			final int index) {
		StringBuffer strB = new StringBuffer();

		if (Parser.TYPE_PUSH.equalsIgnoreCase(command)) {
			if (segment.equalsIgnoreCase("constant")) {
				strB.append(A_TAG).append(index).append(LINE_SEPARATOR)
						.append("D=A").append(LINE_SEPARATOR).append(A_TAG)
						.append(SP).append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("M=M+1")
						.append(LINE_SEPARATOR);
			}

			if (segment.equalsIgnoreCase("local")
					|| segment.equalsIgnoreCase("argument")
					|| segment.equalsIgnoreCase("this")
					|| segment.equalsIgnoreCase("that")) {

				String seg;
				if (segment.equalsIgnoreCase("local")) {
					seg = SEGMENT_LCL;
				} else if (segment.equalsIgnoreCase("argument")) {
					seg = SEGMENT_ARG;
				} else if (segment.equalsIgnoreCase("this")) {
					seg = SEGMENT_THIS;
				} else {
					seg = SEGMENT_THAT;
				}

				strB.append(A_TAG).append(index).append(LINE_SEPARATOR)
						.append("D=A").append(LINE_SEPARATOR).append(A_TAG)
						.append(seg).append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("D=D+A")
						.append(LINE_SEPARATOR).append("A=D")
						.append(LINE_SEPARATOR).append("D=M")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("M=M+1")
						.append(LINE_SEPARATOR);
			}

			if (segment.equalsIgnoreCase("temp")
					|| segment.equalsIgnoreCase("pointer")
					|| segment.equalsIgnoreCase("static")) {
				String var = MessageFormat.format(LABEL_PATTEN2, new Object[] {
						curVMFileName, index });
				int base = 5;
				if (segment.equalsIgnoreCase("pointer")) {
					base = 3;
				}

				String varStr = segment.equalsIgnoreCase("static") ? var : "R"
						+ (base + index);

				strB.append(A_TAG).append(varStr).append(LINE_SEPARATOR)
						.append("D=M").append(LINE_SEPARATOR).append(A_TAG)
						.append(SP).append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("M=M+1")
						.append(LINE_SEPARATOR);
			}
		}

		if (Parser.TYPE_POP.equalsIgnoreCase(command)) {
			if (segment.equalsIgnoreCase("local")
					|| segment.equalsIgnoreCase("argument")
					|| segment.equalsIgnoreCase("this")
					|| segment.equalsIgnoreCase("that")) {

				String seg;
				if (segment.equalsIgnoreCase("local")) {
					seg = SEGMENT_LCL;
				} else if (segment.equalsIgnoreCase("argument")) {
					seg = SEGMENT_ARG;
				} else if (segment.equalsIgnoreCase("this")) {
					seg = SEGMENT_THIS;
				} else {
					seg = SEGMENT_THAT;
				}

				strB.append(A_TAG).append(index).append(LINE_SEPARATOR)
						.append("D=A").append(LINE_SEPARATOR).append(A_TAG)
						.append(seg).append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("D=D+A")
						.append(LINE_SEPARATOR).append(A_TAG).append(seg)
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(SP)
						.append(LINE_SEPARATOR).append("AM=M-1")
						.append(LINE_SEPARATOR).append("D=M")
						.append(LINE_SEPARATOR).append(A_TAG).append(seg)
						.append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR).append(A_TAG).append(index)
						.append(LINE_SEPARATOR).append("D=A")
						.append(LINE_SEPARATOR).append(A_TAG).append(seg)
						.append(LINE_SEPARATOR).append("A=M")
						.append(LINE_SEPARATOR).append("D=A-D")
						.append(LINE_SEPARATOR).append(A_TAG).append(seg)
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR);
			}

			if (segment.equalsIgnoreCase("temp")
					|| segment.equalsIgnoreCase("pointer")
					|| segment.equalsIgnoreCase("static")) {
				String var = MessageFormat.format(LABEL_PATTEN2, new Object[] {
						curVMFileName, index });
				int base = 5;
				if (segment.equalsIgnoreCase("pointer")) {
					base = 3;
				}

				String varStr = segment.equalsIgnoreCase("static") ? var : "R"
						+ (base + index);

				strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
						.append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
						.append(LINE_SEPARATOR).append(A_TAG)
						.append(varStr)
						.append(LINE_SEPARATOR).append("M=D")
						.append(LINE_SEPARATOR);
			}
		}
		try {
			fWriter.write(strB.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 执行VM初始化的汇编代码，该代码必须被置于输出文件的开头.
	 * 
	 */
	public void writeInit() {
		StringBuffer strB = new StringBuffer();
		int spIndex = 0x100;
		strB.append(COMMENT_TAG).append(" bootstrap").append(LINE_SEPARATOR)
				.append(A_TAG).append(spIndex).append(LINE_SEPARATOR)
				.append("D=A").append(LINE_SEPARATOR).append(A_TAG).append(SP)
				.append(LINE_SEPARATOR).append("M=D").append(LINE_SEPARATOR);
		try {
			fWriter.write(strB.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
		writeCall("Sys.init", 0);
	}

	/**
	 * 编写执行label命令的汇编代码.
	 * 
	 * @param label
	 *            标签字符串
	 */
	public void writeLabel(final String label) {
		StringBuffer strB = new StringBuffer();
		strB.append(L_BEGIN_TAG).append(label).append(L_END_TAG)
				.append(LINE_SEPARATOR);
		try {
			fWriter.write(strB.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 编写执行goto命令的汇编代码.
	 * 
	 * @param label
	 *            标签字符串
	 */
	public void writeGoto(final String label) {
		StringBuffer strB = new StringBuffer();
		strB.append(A_TAG).append(label).append(LINE_SEPARATOR).append("0;JMP")
				.append(LINE_SEPARATOR);

		try {
			fWriter.write(strB.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 编写执行if-goto命令的汇编代码.
	 * 
	 * @param label
	 *            标签字符串
	 */
	public void writeIf(final String label) {
		StringBuffer strB = new StringBuffer();
		strB.append(A_TAG).append(SP).append(LINE_SEPARATOR).append("AM=M-1")
				.append(LINE_SEPARATOR).append("D=M").append(LINE_SEPARATOR)
				.append(A_TAG).append(label).append(LINE_SEPARATOR)
				.append("D;JNE").append(LINE_SEPARATOR);

		try {
			fWriter.write(strB.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 编写执行call命令的汇编代码.
	 * 
	 * @param functionName
	 *            函数名称
	 * @param numArgs
	 *            参数个数
	 */
	public void writeCall(final String functionName, final int numArgs) {
		StringBuffer strB = new StringBuffer();
		String retLab = "RETURN" + (++seq);
		// PUSH return-address
		strB.append(A_TAG)
				.append(retLab)
				.append(LINE_SEPARATOR)
				.append("D=A")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("A=M")
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("M=M+1")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" push return-address")
				.append(LINE_SEPARATOR)
				// PUSH LCL
				.append(A_TAG)
				.append(SEGMENT_LCL)
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("A=M")
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("M=M+1")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" push LCL")
				.append(LINE_SEPARATOR)
				// PUSH ARG
				.append(A_TAG)
				.append(SEGMENT_ARG)
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("A=M")
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("M=M+1")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" push ARG")
				.append(LINE_SEPARATOR)
				// PUSH THIS
				.append(A_TAG)
				.append(SEGMENT_THIS)
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("A=M")
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("M=M+1")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" push THIS")
				.append(LINE_SEPARATOR)
				// PUSH THAT
				.append(A_TAG).append(SEGMENT_THAT).append(LINE_SEPARATOR)
				.append("D=M").append(LINE_SEPARATOR).append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("A=M")
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("M=M+1")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" push THAT")
				.append(LINE_SEPARATOR)
				// ARG = SP-n-5
				.append(A_TAG).append(SP).append(LINE_SEPARATOR).append("D=M")
				.append(LINE_SEPARATOR).append(A_TAG).append(numArgs)
				.append(LINE_SEPARATOR).append("D=D-A").append(LINE_SEPARATOR)
				.append(A_TAG).append(5).append(LINE_SEPARATOR).append("D=D-A")
				.append(LINE_SEPARATOR).append(A_TAG).append(SEGMENT_ARG)
				.append(LINE_SEPARATOR).append("M=D")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" ARG = SP-n-5")
				.append(LINE_SEPARATOR)
				// LCL = SP
				.append(A_TAG).append(SP).append(LINE_SEPARATOR).append("D=M")
				.append(LINE_SEPARATOR).append(A_TAG).append(SEGMENT_LCL)
				.append(LINE_SEPARATOR).append("M=D").append('\t')
				.append(COMMENT_TAG).append(" LCL = SP").append(LINE_SEPARATOR);

		try {
			fWriter.write(strB.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}

		// GOTO f
		writeGoto(functionName);
		// (return-address)
		writeLabel(retLab);
	}

	/**
	 * 编写执行return命令的汇编代码.
	 * 
	 */
	public void writeReturn() {
		StringBuffer strB = new StringBuffer();
		// FRAME = LCL 保存当前函数的栈帧参考点（即：LCL）
		// ARG=LCL-5-n SP=LCL+m [n-arg num m-loc num]
		strB.append(A_TAG)
				.append(SEGMENT_LCL)
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append("frame")
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" FRAME = LCL")
				.append(LINE_SEPARATOR)
				// RET = *(FRAME-5)
				.append(A_TAG)
				.append(5)
				.append(LINE_SEPARATOR)
				.append("D=D-A")
				.append(LINE_SEPARATOR)
				.append("A=D")
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append("ret")
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" RET = *(FRAME-5)")
				.append(LINE_SEPARATOR)
				// *ARG = pop
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("M=M-1")
				.append(LINE_SEPARATOR)
				.append("A=M")
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SEGMENT_ARG)
				.append(LINE_SEPARATOR)
				.append("A=M")
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" *ARG = pop")
				.append(LINE_SEPARATOR)
				// SP = ARG+1
				.append(A_TAG)
				.append(SEGMENT_ARG)
				.append(LINE_SEPARATOR)
				.append("D=M+1")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SP)
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" SP = ARG+1")
				.append(LINE_SEPARATOR)
				// THAT = *(FRAME-1)
				.append(A_TAG)
				.append("frame")
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(1)
				.append(LINE_SEPARATOR)
				.append("D=D-A")
				.append(LINE_SEPARATOR)
				.append("A=D")
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SEGMENT_THAT)
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" THAT = *(FRAME-1)")
				.append(LINE_SEPARATOR)
				// THIS = *(FRAME-2)
				.append(A_TAG)
				.append("frame")
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(2)
				.append(LINE_SEPARATOR)
				.append("D=D-A")
				.append(LINE_SEPARATOR)
				.append("A=D")
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SEGMENT_THIS)
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" THIS = *(FRAME-2)")
				.append(LINE_SEPARATOR)
				// ARG = *(FRAME-3)
				.append(A_TAG).append("frame").append(LINE_SEPARATOR)
				.append("D=M").append(LINE_SEPARATOR).append(A_TAG).append(3)
				.append(LINE_SEPARATOR)
				.append("D=D-A")
				.append(LINE_SEPARATOR)
				.append("A=D")
				.append(LINE_SEPARATOR)
				.append("D=M")
				.append(LINE_SEPARATOR)
				.append(A_TAG)
				.append(SEGMENT_ARG)
				.append(LINE_SEPARATOR)
				.append("M=D")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" ARG = *(FRAME-3)")
				.append(LINE_SEPARATOR)
				// LCL = *(FRAME-4)
				.append(A_TAG).append("frame").append(LINE_SEPARATOR)
				.append("D=M").append(LINE_SEPARATOR).append(A_TAG).append(4)
				.append(LINE_SEPARATOR).append("D=D-A").append(LINE_SEPARATOR)
				.append("A=D").append(LINE_SEPARATOR).append("D=M")
				.append(LINE_SEPARATOR).append(A_TAG).append(SEGMENT_LCL)
				.append(LINE_SEPARATOR).append("M=D")
				.append('\t')
				.append(COMMENT_TAG)
				.append(" LCL = *(FRAME-4)")
				.append(LINE_SEPARATOR)
				// JUMP TO Caller
				.append(A_TAG).append("ret").append(LINE_SEPARATOR)
				.append("A=M").append(LINE_SEPARATOR).append("0;JMP")
				.append('\t').append(COMMENT_TAG).append(" JUMP TO Caller")
				.append(LINE_SEPARATOR);

		try {
			fWriter.write(strB.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 编写执行function命令的汇编代码.
	 * 
	 * @param functionName
	 * @param numLocals
	 */
	public void writeFunction(final String functionName, final int numLocals) {
		writeLabel(functionName);
		StringBuffer strB = new StringBuffer();
		for (int i = 0; i < numLocals; i++) {
			strB.append(A_TAG).append(SP).append(LINE_SEPARATOR).append("A=M")
					.append(LINE_SEPARATOR).append("M=0")
					.append(LINE_SEPARATOR).append(A_TAG).append(SP)
					.append(LINE_SEPARATOR).append("M=M+1")
					.append(LINE_SEPARATOR);
		}
		try {
			fWriter.write(strB.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 关闭输出文件
	 */
	public void close() {
		if (fWriter != null) {
			try {
				fWriter.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
